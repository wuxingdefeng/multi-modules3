<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd
	" >
    <!-- 启用注解 -->
     <context:annotation-config/>
    <import resource="applicationContext-services.xml"/>
    <import resource="applicationContext-dao.xml"/>
    <!--<import resource="applicationContext-redis.xml"/>-->
    <!-- 启用扫描-->
    <context:component-scan base-package="com.jueke" >
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <context:property-placeholder ignore-unresolvable="true" location="classpath:conf/dbconfig.properties"/>
    <!-- c3p0链接池 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close"
          p:driverClass="com.mysql.jdbc.Driver"
          p:jdbcUrl="jdbc:mysql://121.43.233.145:3306/jiuzhekan_v2develop"
          p:user="dev"
          p:password="dev"
          p:maxPoolSize="40"
          p:minPoolSize="1"
          p:initialPoolSize="1"
          p:maxIdleTime="20"/>-->
    <!-- druid链接池 -->
    <!-- 数据库基本信息配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="url" value="${jdbcUrl}" />
           <property name="username" value="${jdbcUsername}" />
           <property name="password" value="${jdbcPassword}" />
           <property name="driverClassName" value="${jdbcDriverClassName}" />
              <property name="filters" value="${filters}" />
               <!-- 最大并发连接数 -->
               <property name="maxActive" value="${maxActive}" />
               <!-- 初始化连接数量 -->
               <property name="initialSize" value="${initialSize}" />
               <!-- 配置获取连接等待超时的时间 -->
               <property name="maxWait" value="${maxWait}" />
               <!-- 最小空闲连接数 -->
               <property name="minIdle" value="${minIdle}" />
               <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
               <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
               <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
               <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
               <property name="validationQuery" value="${validationQuery}" />
               <property name="testWhileIdle" value="${testWhileIdle}" />
               <property name="testOnBorrow" value="${testOnBorrow}" />
               <property name="testOnReturn" value="${testOnReturn}" />
               <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
               <!-- 打开removeAbandoned功能 -->
               <property name="removeAbandoned" value="${removeAbandoned}" />
               <!-- 1800秒，也就是30分钟 -->
               <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
               <!-- 关闭abanded连接时输出错误日志 -->
               <property name="logAbandoned" value="${logAbandoned}" />
    </bean>

 <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false"   rollback-for="java.lang.Exception" />
            <tx:method name="*" propagation="REQUIRED" read-only="true"   rollback-for="java.lang.Exception" />
        </tx:attributes>
    </tx:advice>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 事物处理 -->
    <aop:config>
        <aop:pointcut id="pc" expression="execution(* com.jueke.service..*(..))"/>
       <!-- <aop:pointcut id="pc" expression="execution(* cn.springmvcTest.services..*(..))" />-->
        <aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
    </aop:config>

    <!-- 配置mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <!--<property name="mapperLocations" value="mapper/*.xml"></property>-->
        <!--<property name="typeAliasesPackage" value="cn.springmvcTest.model" />-->
        <property name="mapperLocations" value="classpath:mapper/*/*.xml"></property>
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg  ref="sqlSessionFactory" index="0"/>
    </bean>
    </beans>